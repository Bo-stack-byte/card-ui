/* I would love to grow height dynamically. 100px is fine at the start of the game */
.field {
  width: 800px;
  height: 290px;
  background-color: lightgreen;
}



.other {
  display: flex;
  flex-direction: row;
}

td.rightcell {
  display: block;
  height: 600px;
  /* Adjust as needed */
  overflow-y: auto;
  background-color: white;
}


.logs {
  position: relative;
  background-color: white;
  z-index: 100;
}

.inputbox {
  position: fixed;
  z-index: 200;
}

/*style={{position: 'relative', zIndex: 100}*/

.gamestate {
  z-index: 200;
  position: relative;
  max-width: 400px;
  background-color: rgb(230, 192, 192);
  border: 2px solid black;
  font-variant-numeric: tabular-nums;


}

.tapped {
  transform: rotate(90deg);
}

.st333ack {
  position: relative;
  border: blue;
}

.r2owofstacks {
  display: flex;
}

.sta2ck {
  flex: 1;
  padding: 20px;
  border: 2px solid blue;
  width: 80px;
}



.rowo3fstacks {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  /* Adjust the number of columns */
}

.grid-chsild {
  padding: 20px;
  border: 2px solid green;
}




.rowofstacks {
  position: relative;
  /* Set positioning context */
  border: 3px solid #fff;
  padding: 20px;
}

.stack {
  width: 70px;
  float: left;
  padding: 40px;
  padding-bottom: 200px;
  /* border: 2px solid purple;; */
  position: absolute;
  /* Position absolutely within the container */
}

.moves {
  min-width: 200px;
}


.eggstack {
  background-color: black;
  width: 70px;
  float: left;
  padding: 40px;
  padding-bottom: 200px;
  /* border: 2px solid purple;; */
  position: absolute;
  /* Position absolutely within the container */
}


.trashstack {
  background-color: black;
  width: 70px;
  float: left;
  padding: 40px;
  padding-bottom: 200px;
  /* border: 2px solid purple;; */
  position: absolute;

  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100'%3E%3Ctext y='50%25' x='50%25' dy='.3em' text-anchor='middle' fill='lightgrey' font-size='20'%3ETrash%3C/text%3E%3C/svg%3E");

  unused-background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='200' height='200'%3E%3Ctext y='50%25' x='50%25' dy='.3em' text-anchor='middle' fill='lightgrey' font-size='20'%3ETrash%3C/text%3E%3C/svg%3E");
  background-repeat: repeat;
  background-position: 0 0, 10px 10px;

  /* Position absolutely within the container */
}

.select-element {
  /* Set desired height and width here */
  height: 30px;
  width: 200px;
  color: red;
  background-color: blue;
  border: 1px solid #ccc;
  padding: 5px;
  overflow: auto;

}

.rowof2stacks {
  border: 3px solid #fff;
  padding: 20px;
}

.stac1k {
  width: 50%;
  float: left;
  padding: 20px;
  border: 2px solid red;
}

.flexbox-container {
  display: flex;
  flex-direction: row;
}

.hand {
  display: flex;
  flex-direction: row;
}

.table {
  background-color: green;
  width: 80%;
  position: absolute;
  top: 40px;
  /* Header Height */
  bottom: 20px;
  /* Footer Height */

}

.card {
  max-width: 120px;
  max-height: 150px;
  display: flex;
  flex-direction: row;
}

.App {
  text-align: center;
}


.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.egfgzone {
  background-color: lightblue !important;
  z-index: 4;
}

.App-link {
  color: #61dafb;
}

.popup {
  /* Default styles for the popup */
  opacity: 1; /* Ensure full opacity initially */
  transition: opacity 0.2s ease-in-out; /* Transition for opacity change */
  background-color: white;
/*  border: 2px solid black;*/
  padding: 50px;
  color: brown;
  font-size: 30px;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-Index:123;
}

.popup.hide {
  opacity: 0; /* Target opacity for the hidden state */
}

.wrapper {
  position: relative; /* Enable absolute positioning for child elements */
}

.text-overlay {
  position: absolute; /* Position the text on top */
  top: 0; /* Align to top */
  left: 0; /* Align to left */
  color: white; /* Adjust color and other styles as needed */
  z-index: 80;
  background-color: rgba(0, 0, 0, 0.5); /* Optional: Semi-transparent background */
}

.status { 
  background-color: rgb(226, 239, 140, 0.5);
  color: black;
  font-weight: bold;
  font-variant-numeric: tabular-nums;

}


.dp {
/* how to style DP? */
}

.temp { 
  background: rgba(158, 242, 162, 0.5);
  color: black;
  font-weight: bold;
}


.keyword {
  background: rgba(176, 64, 16, 0.5);
  color: white;
  font-weight: bold;
}



/*@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}*/